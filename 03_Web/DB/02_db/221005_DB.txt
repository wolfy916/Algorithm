< Intro >

RDB(관계형 데이터베이스)
  - 데이터를 테이블, 행, 열 등으로 나누어 구조화하는 방식
  - RDB의 테이블에는 고유식별키(PK)가 있으며, 외래키(foreign key, FK)를 사용하여 각 행에서 서로 다른 테이블간의 관계를 만듦.

RDB에서의 관계
  1. 1:1
  - One-to-one relationships
  - 한 테이블의 레코드 하나가 다른 테이블의 레코드 단 한 개와 관련된 경우

  2. N:1
  - Many-to-one relationships
  - 한 테이블의 0개 이상의 레코드가 다른 테이블의 레코드 한 개와 관련된 경우
  - 기준 테이블에 따라(1:N, One-to-many relationships)이라고도 함

  3. M:N
  - Many-to-many relationships
  - 한 테이블의 0개 이상의 레코드가 다른 테이블의 0개 이상의 레코드와 관련된 경우
  - 양쪽 모두에서 N:1 관계를 가짐

< Foreign Key >

외래 키(외부 키)
  - RDB에서 한 테이블의 필드 중 다른 테이블의 행을 식별할 수 있는 키
  - 키를 사용하여 부모 테이블의 유일한 값을 참조 -> 참조 무결성: RDB 모델에서 관련된 2개의 테이블간의 일관성을 말함
  - 외래 키의 값이 반드시 부모 테이블의 기본 키 일 필요는 없지만 유일한 값이어야 함

< Django Relationship fields >

종류
  1. OneToOneField() -> one-to-one relationship
  2. ForeignKey() -> many-to-one relationship
  3. ManyToManyField() -> many-to-many relationship

ForeignKey(to, on_delete, **options)
  - many-to-one relationship를 담당하는 Django의 모델 필드 클래스
  - Django 모델에서 RDB의 FK를 담당
  - 2개의 필수 위치 인자가 필요 ( 참조하는 model class, on_delete 옵션)
  - 모델 클래스 내부에서 작성하는 위치와 관계없이 테이블 마지막 필드에 작성됨
  - ForeignKey() 클래스의 인스턴스 이름은 참조하는 모델 클래스 이름의 단수형(소문자)으로 작성하는 것을 권장

ForeignKey arguments - on_delete
  - 외래 키가 참조하는 객체가 사라졌을 때, 외래 키를 가진 객체를 어떻게 처리할 지를 정의
    ex) 게시글 1개가 삭제되었을 때, 해당 게시글에 달린 댓글들을 어떻게 할 것인가 ?
  - 데이터 무결성 측면에서 중요한 설정
  - 옵션값
    - CASCADE : 부모 객체(참조 객체)가 삭제 됐을 때, 이를 참조하는 객체도 삭제
    - PROTECT : 부모 객체가 삭제되지 않도록 protected error를 발생시킴
    - SET_NULL : 부모 객체가 삭제 됐을 때, 이를 참조하는 객체의 FK를 null로 바꿈 (null=True 일때만 가능)
    - SET_DEFAULT : 부모 객체가 삭제 됐을 때, FK를 default값으로 바꿈 (default값이 있을때만 가능)
    - SET() : 부모 객체가 삭제 됐을 때, SET에 설정된 함수 등에 의해 설정
    - DO_NOTHING : 부모 객체가 삭제 됐을 때, 아무런 행동을 취하지 않음 -> 참조 무결성을 해칠 위험이 있음.

ForeignKey column
  - ForeignKey 모델 필드로 인해 작성된 컬럼의 이름이 article_id인 것을 확인
    -> '클래스 이름' + '_id' 로 생성됨 -> 참조하는 클래스 이름을 소문자(단수형)으로 작성하는 이유

[참고] 데이터 무결성 (Data Intergrity)
  - 데이터의 정확성과 일관성을 유지하고 보증하는 것
  - 데이터베이스나 RDBMS의 중요한 기능
  - 무결성 제한의 유형
    1. 개체 무결성 (Entity integrity)
    2. 참조 무결성 (Referential integrity)
    3. 범위 무결성 (Domain integrity)

< 관계 모델 참조 >

Related manager
  - Related manager는 N:1 혹은 M:N 관계에서 사용 가능한 문맥(context)
  - Django는 모델 간 N:1 혹은 M:N 관계가 설정되면 역참조할 떄에 사용할 수 있는 manager를 생성
    - 우리가 이전에 모델 생성시 objects라는 매니저를 통해 queryset api를 사용했던 것처럼 related manager를 통해 queryset api를 사용할 수 있게 됨

역참조
  - 정참조의 반대

article.comment_set.method()
  - 역참조 시에 사용하는 매니저
  - article.comment 형식으로는 댓글 객체를 참조 할 수 없음
  - 대신 Django가 역참조 할 수 있는 comment_set manager를 자동으로 생성해줌
    * N:1 관계에서 생성되는 Related manager의 이름은 참조하는 "모델명_set" 이름 규칙으로 생성됨

ForeignKey arguments - related_name='원하는 대체 이름'
  - ForeignKey 클래스의 선택 옵션
  - 역참조 시 사용하는 매니저 이름(model_set_manager)을 변경할 수 있음
  - 작성 후, model 수정 사항에 속하므로 migration 과정 필요

