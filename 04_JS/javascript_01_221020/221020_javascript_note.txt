웹 개발자 공부
HTML 페이지 구조 / 문맥에 맞는 태그 / 용도에 맞는 태그
CSS	  기본스타일 / 포지션 / 정렬(Flex,Grid)
JS 	  변수 데이터타입 오프젝트 배열 함수 반복문 DOM

Dom  (Document Object Model)
문서를 객체화 시키켜서 + JS언어로 제어 하는것
(웹 문서를 동적으로 만들어 준다)


JS를 가지고 문서를 제어할 수 있지만
더 강력하고 화려하게 데이터를 잘 처리 하고 싶으면
HTML5 API를 이용해 위치정보나 멀티미디어적인 요소를 추가
React Vue 등의 frame work을 이용해서 dom을 더 강력하게
조작할수 있다.

일단 우리는 javascript부터 공부를 시작해 보자!!

브라우저에 직접 js 코드를 작성..

웹 작동 원리는 보면

브라우저 가 html문서를 열고
html문서는 css 또는 js 파일을 가져오는 구조

js로 html 문서 조작!!
앞으로
DOM 이라는 것을 조작
BOM 이라는 것을 조작
JAVA script 문법을 사용해서도 조작

dom
웹 문서를  js같은 프로그래밍 언어로
조작 제어 할수 있도록 객체를 사용해서
문서를 해석하는 방법을 dom이라고 한다.

Bom
브라우저 오브젝트 모델
웹 브라우저 전체를 객체로 관리하는 것을 의미

결론: 우리가 할것은 dom bom 요소를 
자바 스크립트로 제어 조작!!

자바스크립트 코어!! = 자바스크립트 문법 공부

식별자??
변수명 함수명 객체명  등을 말함

앞으로 배울것은
변수 / 데이터타입 / 연산자 / 조건반복문 / 함수 / 배열 / 객체 / this



//변수
let const var
//공통점// 선언을 1번만 해야 한다
// 차이점// 재할당 가능여부

let a=1
a=10    // 재할당 가능
const b=1 // 값을 바꿀 수 없음 (재할당 불가능)


=============참고 ===========

객체는 - 참조형의 자료형이자. (원시혀잉 아니다)

const obj={
    a:1
}
console.log(obj.a)

let obj2=obj;       // 얕은 복사
obj.a=10

console.log(obj.a)
console.log(obj2.a)


// 깊은 복사가 아님.. 단 깊은 복사처럼 보이는 것임
// 다차원 배열일 경우 적용이 안됨

let obj3={...obj}
obj.a=20
console.log(obj.a)
console.log(obj3.a)  

=================================

// let const
// var   차이점1   호이스팅 여부

// 호이스팅이 무엇?
// 런타임 이전에 변수(함수)선언한 것을을 
// 위로 끌어 올리는 행위

// console.log(a) // 버그
// let a=10;
// console.log(a)

// console.log(a) // 호이스팅 발생 undefined 먼저 출력
// var a=10;
// console.log(a) // 10 출력

var a;
console.log(a)
a=10;
console.log(a)

=================================

// let const
// var   차이점2 블록레벨 스코프 || 함수레벨 스코프??


let x=1;
if (x===1){
    let x=3;		
    console.log(x);
}
console.log(x);


// 스코프 - 유효범위

// let const 블록레벨 스코프
// if for안에 변수 선언시 
// 그 안에서만 유효!
// 반면에 var 함수레벨 스코프

=================================
변수는 여기까지 보고
데이터 타입을 보자

데이터 타입에는
number float string boolean undefind null    (원시타입)
Array Function		    			      		(참조타입)
이런 것 들이 있다

=================================
number를 먼저 보자 !!


const a = 13
const b = -5
const c = 3.14 // float - 숫자표현
const d = 2.998e8 // 2.998 * 10^8 = 299,800,000
const e = Infinity
const f = -Infinity
const g = NaN // Not a Number를 나타내는 값

let aa=21e8;
// 21 곱하기 10의 8승  - 지수표기법

//Nan??  //not a number
숫자형태인지 아닌지 판별 (true false 값을 반환)

//Nan??  //not a number
//숫자형태인지 아닌지 판별 (true false 값을 반환)
//타입을 무시 !!

let a='15'
console.log(isNaN(a)) // 너 숫자가 아니니?
                    // 아니 숫자야 (false)

a=15
console.log(isNaN(a)) // 너 숫자가 아니니?
                    // 아니 숫자야 (false)

a='asdf'
console.log(isNaN(a)) // 너 숫자가 아니니?
                    // 응 숫자 아니야 (true)


=================================

//자 그다음으로 하나씩 볼 것인데 string도 보자 !!!

let a="choi"
let b="minho"

console.log(a+b); // choiminho
console.log(a+" "+b); // choi minho
console.log(a+'\n'+b);
//choi
//minho
console.log(a+" "+"1"+" "+b);
// choi 1 minho

console.log(`${a}${b}`);   // 빽틱
console.log(`${a} 1 ${b}`);


//'\n' = 개행문자 (한줄띄어쓰기(엔터))

=================================

// null undefined

let a;
console.log(a)


// 의도적으로 일단 빈 값을 넣어주겠다!!
//null 을 사용!! 
let b=null
console.log(typeof(b))
//  object 찍힌다 객체 아니다.(언어버그)
// 원시 타입이다.

=================================

증가 연산자


let a=3
let b=5
b=++a // 전치(위)증가 연산자
console.log(a,b) // 4 4

a=3
b=5
b=a++ // 후치(위)증가 연산자
console.log(a,b) // 4 3


=================================


let a=prompt() // 입력
// 3
if (a>=2){
    console.log("오삼")
}
else if (a===3){
    console.log("불고기")
}
else if (a===5){
    console.log("닭고기")
}
else{    
    console.log("맛있다")
}

else - else문 바로 위에 조건이 거짓이면 바로 실행
         (else문 위 위 위 의 조건들은 보지도 않음)
else if - else if 문 위에 조건이 거짓이고 
        그리고 else if의 조건이 참이면
         (else if 문 위의 조건이 참이라면 그냥 바로 넘어감)

=============================

삼항연산자

// a,b둘중 큰값 구하기

let Maxvalue=(a>b)?a:b

// 조건연산자 (삼항연산자)
// ()안의 조건이 참이면 a값 반환 그게 아니면 b값 반환


=============================
switch 문

let b=prompt(); 
let a=10
switch(b){
    case '더하기':{
        a+=2
        break        
    }
    case '곱하기':{
        a*=2 
        break       
    }
    default:
        a-=2
}
console.log(a)


=============================

//연습문제1 부터 3까지 출력

//연습문제2
// 5 10
// 4 9
// 3 8
// 2 7
// 1 6

for(let x=5;x>=1;x--){
    console.log(x,x+5)
}


//연습문제3
// 1부터 13보다 작을때 까지
// 홀수만 출력하기

for(let x=1;x<13;x+=2){
    console.log(x)
}


=========================


//for in- 객체순회시
//for of - 배열순회시

const fruits={
    apple:2000,
    banana:3000,
    mango:6000,
}
// key 값만 출력
// apple 
// banana
// mango
for(let x in fruits){
    console.log(x)
}

// value 출력
// 2000
// 3000
// 6000
for(let x in fruits){
    console.log(fruits[x])
}


arr=[2,5,5,7,12,6]
for(let x of arr){
    console.log(x)
}

console.log(...arr)



=========================


//함수
//함수 선언식 - 호이스팅 된다

kakao(38) // 38 - argument 인자값

function kakao(age){  // age-parameter 매개변수
    console.log(age)
}



//함수 표현식 - 호이스팅 안됨
// const naver=function(age){
//     console.log(age)
// }
// naver(40)


// arrow function
// const naver=(age)=>{
//     console.log(age)
// }
// naver(40)

// arrow function 에서 값 반환하기 (return하기)

//변화 전
// const naver=(age)=>{
//     return age+10
// }
// console.log(naver(40))

// 변화 후 (식이 1줄만 있는경우+return)
// {}랑 return 안써도 됨
const naver=(age)=>age+10 // 표현 가능
console.log(naver(40))



function kakao(age){  // age-parameter 매개변수
    console.log(age)
}
kakao(38) // 38 - argument 인자값





//default argument - 함수 안에서 매개변수 만들어서 값 초기화 가능
// const naver=(age,f=100)=>{
//     console.log(age,f)
// } 
// naver(40)


// 매개변수 spread 사용 가능

// 인자개수 불일치 가능
const naver1=(age,a,b)=>{
    console.log(age,a,b)
} 
naver1(40,50,60,70,80,90)


// 매개변수 spread 사용 가능
const naver2=(age,...rest)=>{
    console.log(age,...rest)
} 
naver2(40,50,60,70,80,90)

============================

연습문제

// 연습문제 

// skt라는 화살표 함수로 
// 3,6    2개를 매개변수로 
// 인자값으로 넘겨주고

// skt 함수는 두 숫자의 곱을 리턴하는
// 함수 입니다.
// 리턴값을 result 변수 안에 담아 주세요. 
// 그리고 result 출력해 주세요.

// 18

// const skt=(a,b)=>a*b;

// let result=skt(3,6);
// console.log(result)



============================


array  배열
// arr=[1,2,3,4,5]

// for(let x=0;x<arr.length;x++){
//     console.log(arr[x])
// }

// console.log(...arr)
// console.log(typeof(arr)) // 객체 입니다.!!

// 파이썬과 다른덤
// -1인덱스는 없다 !!
// append 없다 !!

const a=[1,2,3,4,5];

a.reverse();  // 5 4 3 2 1

// push pop 원소값 뒤에 추가 또는 삭제
a.push(6,7,8,[1,2,3]);  
console.log(a); // 5 4 3 2 1 6 7 8 [1 2 3]

a.pop();                
console.log(a); // 5 4 3 2 1 6 7 8 

// unshift shift 원소값 앞에!! 추가 또는 삭제
a.unshift(9);      
console.log(a);

a.shift();        
console.log(a);

 // 값 3이 있는곳의 인덱스 반환
const result=a.indexOf(3);
console.log(result)


const ret=a.join('/') //5/4/3/2/1/6/7/8
console.log(ret)
const ret2=a.join('') 
console.log(ret2)


============================


const num=[8,5,2,1]
// const j=9

// 배열안에 9라는 값이 있는지 없는지 확인
// 9라는 값을 찾고 싶다!

//사실 for문 돌리면 됨
let flag;
for(let x=0;x<num.length;x++){
    if(num[x]===j){
        flag=1;
        break;
    }
}
if(flag===1)console.log(j) // 9
else console.log(flag) // undefined


//const num=[8,5,2,1]
const j=9
const findj=num.find(ele=>ele===j)
console.log(findj)

// 그다음 문제.. 배열 안의 모든 값들이
// 모두 3보다 큰지 확인하고 싶다!!

//const num=[8,5,2,1]
const e=num.every(ele=>ele>3)
console.log(e)


// 배열안의 값이 하나라도 3보다 큰지 확인
// some 함수 사용가능 true / false 반환
const s=num.some(ele=>ele>3)
console.log(s)

//const num=[8,5,2,1]
//배열 모든 요소의 sum 값 구하기 

//for 문으로 sum 구하기
let sum=0
for(let x=0;x<num.length;x++){
    sum+=num[x];
}
console.log(sum)




//const num=[8,5,2,1]
// 고차함수 reduce를 사용해보자

//const getsum=num.reduce(함수,시작값)
const getsum=num.reduce((acc,cur)=>acc+=cur,0)
console.log(getsum)
// acc- accumulated (누적되는 값)
// cur- current (현재값 (배열의 값))

=========================================

객체

fastfood={
    a:1,
    "bbq":"gold_olive",
    "ham burger":{
        b:2,
        c:3
    },
    abc(){             // <메서드 축약> :function 지워도 됨
        console.log('hi')
    }
}
// 출력해 보세요~
console.log(fastfood.a)
console.log(fastfood.bbq)
//console.log(fastfood.hamburger.b) 
console.log(fastfood["ham burger"].b) 
fastfood.abc(); 

=================================================

const friends=["kevin","bob","kate"]
const age=[26,25,27]

let index=1
const school={
    friends, // key값과 할당받는 변수의 이름이 같을경우 축약 가능
    age:age, // age는 비교하기 위해서 축약 안했음
    [friends[index]]:age[index]
}

console.log(school)

// 메소드명 축약
// 키값을 동적할당 가능 !!
// key값과 할당받는 변수의 이름이 같을경우 축약 가능



=================================================

user={
    name1:"kevin",
    name2:"kate",
    gender:"male",
    ...kfc
}

// const name2=user.name2
// const gender=user.gender

//console.log(name2,gender)

// 변수명과 객체의 key값이 같다면 아래와 같이도 사용 할 수
// 있다 !!!

// const{name2}=user
// const{gender}=user

// 객체의 destructuring 
// const{name1,gender}=user
// console.log(name2,gender)

// 객체에서의 spread
// kfc={
//     name3:"jane",
//     name4:"bob",
// }

// user={
//     name1:"kevin",
//     name2:"kate",
//     gender:"male",
//     ...kfc
// }
// console.log(user)


- 오늘자데일리과제 답안 -
const participantNums =  [[1, 3, 2, 2, 1], 
[3, 7, 100, 21, 13, 6, 5, 7, 5, 6, 3, 13, 21],
[9, 1, 8, 7, 71, 33, 62, 35, 11, 4, 7, 71, 33, 8, 9, 1, 4, 11, 35]
]

function findSolo (arr) {
  // 카운트 결과를 담아줄 딕셔너리
  let counts = {}

  // 각 번호를 부여받은 사람을 count
  for (num of arr) {
    // counts 객체에 키가 없다면 1을 할당, 있다면 1을 더해줌
    if (counts[num] === undefined) {
      counts[num] = 1
    } else {
      counts[num] = counts[num] + 1
    }
  }

  // 깍두기 ( 값이 1인 key ) 를 찾음
  for (count in counts) {
    if (counts[count] === 1) {
      console.log(count)
      break
    }
  }
}

participantNums.forEach((tc) => findSolo(tc))





